head(airquality)
split(airquality, airquality$Month)
s<-split(airquality, airquality$Month)
s
lapply( s, function(x) colmeans(x[,"Ozone"]))
lapply( s, function(x) colMeans(x[,"Ozone"]))
lapply( s, function(x) colMeans(x[,c("Ozone")]))
lapply( s, function(x) colMeans(x[,c("Ozone", "Wind")]))
lapply( s, function(x) colMeans(x[,c("Ozone", "Wind", "Solar.R")]))
s<- ( 1:4, c(1,2,3))
s<- list( 1:4, c(1,2,3))
s
sapply(s)
sapply(s, sum)
lapply(s, sum)
lapply(s, sum)
sapply(s, sum)
sapply(s, min)
lapply(s, min)
lapply(s, min)
x <- list(a=matrix(1:4,2,2), b= matrix (1:6,3,2))
x
lapply(x, min)
lapply(x, max)
lapply(x, function(bla) bla[,1])
lapply(x, function(bla) bla[,2])
lapply(x, function(bla) bla[,3])
lapply(x, function(bla) bla[,2])
lapply(x, function(bla) bla[,1])
airquality
split ( airquality, airquality$Month)
s <- split(airquality, airquality$Month)
lapply (s)
lapply (s , function (bla) bla[,1])
lapply (s , function (bla) bla[,1])
lapply (s , function (bla) bla[,1])
s
lapply (s , function (bla) bla[,2])
lapply (s , function (bla) bla[,2]*1000)
lapply (s , function (bla) colMeans(bla[,2]))
x < c(rnorm(10), runif(10), rnorm(10,1))
x
x < c(rnorm(10), runif(10), rnorm(10,1))
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
f <- gl(3,10)
tapply(x,y,mean)
tapply(x,f,mean)
split(x,f,mean)
split(x,f)
tapply(x,f,min)
tapply(airquality, airquality$Month,min)
tapply(airquality, airquality$Month,mean)
x <- matrix(rnorm(200),20,10)
x
apply(x,2, mean)
apply(x,1, sum)
x <- matrix(1:4,2,2)
x
apply(x,1, sum)
apply(x,3, sum)
apply(x,1, sum)
apply(x,2, sum)
rowsum(x)
rowsum(x,dims=2)
rowMeans(x,dims=2)
rowMeans(x)
rowSums(x)
apply(x,1, sum)
rowSums(x)
colSums(x)
mapply(rep,1:2,1)
mapply(rep,1:2,2)
s <- split(airquality,airquality$month)
s <- split(airquality,airquality$Month)
s
lapply(s,function(bla) colmeans(bla[,c("Ozone","Solar.R"]))
lapply(s,function(bla) colmeans(bla[,c("Ozone","Solar.R")]))
lapply(s,function(bla) colMeans(bla[,c("Ozone","Solar.R")]))
sapply(s,function(bla) colMeans(bla[,c("Ozone","Solar.R")]))
lapply(s,function(bla) colMeans(bla[,c("Ozone","Solar.R")]))
sapply(s,function(bla) colMeans(bla[,c("Ozone","Solar.R")]))
sapply(s,function(bla) colMeans(bla[,c("Ozone","Solar.R")],na.rm=TRUE))
x <- rnorm(10)
x
f1 <- gl(2,5)
f2 <- gl(5,2)
f
f1
f2
iteraction(f1,f2)
interaction(f1,f2)
split(x,list(f1,f2))
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2)),drop=TRUE)
str(split(x,list(f1,f2),drop=TRUE))
class(gl(2,5))
n <- 10; nn <- 100
g <- factor(round(n * runif(n * nn)))
g
n
g <- airquality$Month
l <- split(airquality, g)
l
swirl
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.charachter(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(colors,sum))
lapply(colors,sum)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,1:23]
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flag_dataset, unique)
unique_vals <- lapply(flag_dataset, unique)
unique_vals <- lapply(flag_shapes, unique)
unique_vals <- lapply(flags, unique)
unique_vals
unique_vals <- lapply(flags, length(unique))
unique_vals <- sapply(flags, unique)
info()
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
flags$landmass
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags, summary)
tapply(flags$population, flags, summary)
info()
skip()
library(datasets)
data(iris)
?iris
iris
split(iris, iris$Species)
a <- split(iris, iris$Species)
lapply ( a, function(bla) mean(bla[,"Sepal.Length "]))
lapply ( a, function(bla) mean(bla[,"Sepal.Length"]))
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
?apply
apply(iris[, 1:4], 2, mean)
apply(a[, 1:4], 2, mean)
data(mtcars)
?mtcars
mtcars
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars
split(mtcars, mtcars$cyl)
lapply ( split(mtcars, mtcars$cyl), function ( bla) colMeans(bla[,"mpg"]))
lapply ( split(mtcars, mtcars$cyl), function ( bla) colMeans(bla[,"mpg","hp"]))
a <- split(mtcars, mtcars$cyl)
lapply ( split(mtcars, mtcars$cyl), function ( bla) mean(bla[,"mpg","hp"]))
lapply ( split(mtcars, mtcars$cyl), function ( bla) mean(bla[,"mpg"]))
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
split(mtcars, mtcars$cyl)sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mpg, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, sum)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
a <- tapply(mtcars$mpg, mtcars$cyl, mean)
a["4"]
a["8"] - a["4"]
debug(ls)
?debug
ls
ls()
ls()
iris
Q
Q
with(iris, tapply(Sepal.Length, Species, mean))
Q
Q
with(iris, tapply(Sepal.Length, Species, mean))
with(iris, tapply(Sepal.Length, Species, mean))
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
pply(iris, 2, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
iris[, 1:4]
?apply
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
a <- sapply(split(mtcars$hp, mtcars$cyl), mean)
a
a["8"]
a["8"] -  a["4"]
Q
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector
makeVector(1)
setwd("~/Projects/DataScienceCoursera")
library
?library
source("cachemean.R")
makeVector
makeVector (mean())
makeVector (mean
)
makeCacheMatrix <- function(x = matrix()) { }
makeCacheMatrix <- function(x = matrix()) { x}
makeCacheMatrix
makeCacheMatrix(matrix(1:4,2,2))
makeCacheMatrix <- function(x ) { x}
makeCacheMatrix(matrix(1:4,2,2))
inv <- NULL
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(c("a","b","c")
)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
source("cachematrix.R")
source("cachematrix.R")
setwd("/home/osboxes/Projects/ProgrammingAssignment2/")
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
x
x = rbind(c("a","b"), c(-2, 1))
x
x = rbind(c("a","b"), c(-2, 1))
x
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
x = matrix(1:4,2,2)
x
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
m$get()
m$get()
m$setinverse()
m$setinverse(1)
m$getinverse()
m$list
source("cachematrix.R"")
source("cachematrix.R")
source("cachematrix.R")
x = matrix(1:4,2,2)
x
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
source("cachematrix.R")
cacheSolve(m)
m = makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(M)
cacheSolve(m)
source("cachematrix.R")
m = makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
mean(x)
traceback(x)
traceback()
mean(xasdf)
traceback()
lm ( x - y)
traceback()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInverse(inv)
inv
}
x = matrix(1:4,2,2)
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
r <- rnorm(100,2,4)
x
r
summary(r)
str(r)
source ("cacheVector.R")
my_vector <- makeVector(1:15)
my_vector
my_vector$x
my_vector$m
my_vector$get()
source ("cacheVector.R")
my_vector <- makeVector(1:15)
my_vector$getm
my_vector$set(10)
x
source ("cacheVector.R")
my_vector <- makeVector(1:15)
my_vector$set(10)
y
x
my_vector$get
source ("cacheVector.R")
my_vector <- makeVector(1:15)
my_vector$get
source ("cacheVector.R")
my_vector <- makeVector(1:15)
my_vector$get
my_vector$get
my_vector2 <- makeVector(1:15)
my_vector2$get
my_vector2$set(x)t
my_vector2$set(x)
my_vector2$set(1:15)
my_vector2$set(1)
makeVector$set(1:15)
a <- makeVector(100)
a$get()
a$set(200)
a$set()
source ("cacheVector.R")
a <- makeVector(100)
a$set()
a$set(100)
a$get(x)
a$get()
a <- makeVector(1:100)
a$get()
x$getmean()
a$getmean()
a$setmean()
a$getmean()
a <- makeVector(100)
a$getmean()
a$setmean(3)
a$getmean()
a$get()
a <- makeVector(1:100)
a$get()
a$setmean(1:20)
a$getmean()
cachemean
cachemean(a)
a$list
a
source ("cacheVector.R")
a <- makeVector(1:100)
chachemean(1:15)
cachemean(1:15)
cachemean(a)
a <- makeVector(1:100)
cachemean(a)
cachemean(makeVector((100)))
cachemean(makeVector((100))
)
a <- makeVector(1:100)
cachemean(a)
cachemean(a)
cachemean(a)
a <- makeVector(1:100)
cachemean(a)
source ("cacheVector.R")
a <- makeVector(1:100)
cachemean(a)
cachemean(a)
cachemean(a)
cachemean(a)
a$set(1:20)
a$set(1:200)
a <- makeVector(1:100)
cachemean(a)
a$set(1:20)
source ("cacheVector.R")
a <- makeVector(1:100)
a$set(1:20)
source ("cacheVector.R")
a <- makeVector(1:100)
a$set(1:20)
source ("cacheVector.R")
a <- makeVector(1:10)
cachemean(a)
a$set(1:20)
a <- makeVector(1:100)
a$set(1:10)
list (a = a)
list
list (a)
list ( a = a )
list ( b=b)
list ( b = b)
a <- makeVector(1:100)
a$set(10)
source ("cacheVector.R")
a <- makeVector(1:100)
a$set(10)
